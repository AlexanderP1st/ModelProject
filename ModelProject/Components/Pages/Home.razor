@page "/"
@using ModelProject.Model

@inject ModelProvider ModelProvider
@inject NavigationManager NavigationManager

<PageTitle>AP Models</PageTitle>

@*Displays this message if no models have been uploaded*@
@if (digitalmodel == null || !digitalmodel.Any())
{
    <p>No models uploaded yet.</p>
}
else
{
    <div class="container">
        <div class="row mb-4">
            <div class="input-group">
                @*Allows the user to enter a word to filter a models*@
                <span class="input-group-text" id="search">Search</span>
                <input type="text" class="form-control" placeholder="Search for models..." @bind="searchTerm" @bind:event="oninput">
            </div>
        </div>

        <div class="row">
            @foreach (var model in FilteredModels)
            {
                <div class="col-sm-6 col-md-4 col-lg-3 mb-4">
                    <div class="card">
                        @*Displays the image of the model*@
                        <img src="/img/digitalmodels/@model.ImageUrl" class="img-thumbnail" alt="@model.Title" onerror="this.onerror = null; this.src='/img/no_digitalmodels.png'">
                        <div class="card-body">
                            @*Fetches and displays the model title and category*@
                            <h5 class="card-title">@model.Title</h5>
                            <p class="card-text">@model.Category</p>
                            <button @onclick="() => GoToModelPage(model.Id)" class="btn btn-outline-primary">View Details</button>
                        </div>
                    </div>
                </div>
            }
        </div>

        @*Displays if the word the user enterd doesn't match a model title or category*@
        @if (!FilteredModels.Any())
        {
            <p>No models found :(</p>
        }
    </div>
}

@code {
    private IEnumerable<DigitalModel> digitalmodel;
    private string searchTerm = "";
    private SortCriteria sortCriteria = SortCriteria.Title;

    // Filtered models dynamically updates based on search term
    private IEnumerable<DigitalModel> FilteredModels => digitalmodel?.Where(GetSearchCriteria).ToList() ?? Enumerable.Empty<DigitalModel>();

    protected override async Task OnInitializedAsync()
    {
        digitalmodel = await ModelProvider.GetAllModelsAsync();
        StateHasChanged();
    }

    private void GoToModelPage(int modelId)
    {
        //navigation to model page of a specific model
        NavigationManager.NavigateTo($"/ModelPage/{modelId}");
    }

    private bool GetSearchCriteria(DigitalModel model)
    {
        if (string.IsNullOrWhiteSpace(searchTerm)) return true;

        //checks that the title and category matches the searchterm
        return model.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
               model.Category.Contains(searchTerm, StringComparison.OrdinalIgnoreCase);
    }

    private void Sort(SortCriteria criteria)
    {
        sortCriteria = criteria;
        //uses a switch expression to reorder the list of models
        digitalmodel = sortCriteria switch
        {
            SortCriteria.Title => digitalmodel.OrderBy(m => m.Title),
            SortCriteria.Category => digitalmodel.OrderBy(m => m.Category),
            _ => digitalmodel
        };
    }

    private enum SortCriteria
    {
        Title,
        Category
    }
}
