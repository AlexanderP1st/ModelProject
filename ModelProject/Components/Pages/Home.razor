@page "/"
@using ModelProject.Model

@inject ModelProvider ModelProvider 
@inject NavigationManager NavigationManager
 

<PageTitle>AP Models</PageTitle>

@*Checks if models have been uploaded*@
@if (digitalModels == null || !digitalModels.Any())
{
    <p>No models uploaded yet.</p>
}
else
{
    //the format of the model on the hompage 
   <div class="container">
       <div class="row">
           @foreach(var model in digitalModels)
            {
             <div class="col-sm-6 col-md-4 col-lg-3 mb-4">
                 <div class="card">
                     <img src="" class="card-img-top" alt="@model.Title Thumbnail" />
                     <div class="card-body">
                            <h5 class="card-title">@model.Title</h5>
                            <p class="card-text">@model.Category</p>
                            <button @onclick="@(() => GoToModelPage(model.Id))" class="btn btn-outline-primary">View Details</button>
                     </div>
                 </div>
             </div>
             }
        </div>
        @*<div class="row row-cols-1 row-cols-sm-2 row-cols-lg-3 row-cols-xl-4 g-4"/>
             
                @foreach (var digitalmodel in FilteredModels)
                {
                  <div class="col"> 
                      <StoreItem DigitalModels="digitalmodels" />
                  </div>
                }
                @if (!FilteredModels.Any())
                {
                   <p>No models found :(</p>
                }*@
       
   </div>
}

@code
{
    private IEnumerable<DigitalModel> digitalModels; 
    @*private string searchTerm = "";
    private bool GetSearchCriteria(DigitalModel digitalModel)
    {
        return digitalModel.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
        || digitalModel.Category.Contains(searchTerm, StringComparison.OrdinalIgnoreCase);
    }
    private SortCriteria sortCriteria = SortCriteria.Title;

    private IEnumerable<DigitalModel> filteredmodels;
    private IEnumerable<DigitalModel> FilteredModels
    {
        get
        {
            return filteredmodels.Where(GetSearchCriteria);
        }
        set
        {
            filteredmodels = value; 
        }
    }*@

    protected override async Task OnInitializedAsync()
    {
        digitalModels = await ModelProvider.GetAllModelsAsync();
    }

    private void GoToModelPage(int modelId)
    {
        NavigationManager.NavigateTo("/ModelPage/{modelId}");
    }

    @*private void Sort(SortCriteria criteria)
    {
        sortCriteria = criteria;
        filteredmodels = criteria switch
        {
            SortCriteria.Title => FilteredModels = filteredmodels.OrderBy(c => c.Title),
            SortCriteria.Category => FilteredModels = filteredmodels.OrderBy(c => c.Category),
            _ => filteredmodels
        };
    }
    private enum SortCriteria
    {
        Title, 
        Category
    }*@
}

