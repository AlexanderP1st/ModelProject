@page "/"
@using ModelProject.Model

@inject ModelProvider ModelProvider
@inject NavigationManager NavigationManager


<PageTitle>AP Models</PageTitle>

@*Checks if models have been uploaded*@
@if (digitalModel == null || !digitalModel.Any())
{
    <p>No models uploaded yet.</p>
}
else
{
    //the format of the model on the hompage
    <div class="container">
        <div class="row">
            <div class="input-group">
                <span class="input-group-text" id="search">Search</span>
                <input type="text" class="form-control" placeholder="Search for models..." aria-label="Search" aria-describedby="search" @bind="searchTerm" @bind:event="oninput" />
            </div>
            @foreach (var model in digitalModel)
            {
                <div class="col-sm-6 col-md-4 col-lg-3 mb-4">
                    <div class="card">
                        <img src="" class="card-img-top" alt="@model.Title Thumbnail" />
                        <div class="card-body">
                            <h5 class="card-title">@model.Title</h5>
                            <p class="card-text">@model.Category</p>
                            <button @onclick="@(() => GoToModelPage(model.Id))" class="btn btn-outline-primary">View Details</button>
                        </div>
                    </div>
                </div>
            }
        </div>
        <div class="row row-cols-1 row-cols-sm-2 row-cols-lg-3 row-cols-xl-4 g-4"/>

    @foreach (var digitalmodel in FilteredModels)
    {
        <div class="col">
           <StoreItem DigitalModels="digitalModels" />
        </div>
    }


    @if (!FilteredModels.Any())
    {
    <p>No models found :(</p>
    }

    </div>
}

@code
{

    private IEnumerable<DigitalModel> digitalModel;
    private string searchTerm = "";
    private SortCriteria sortCriteria = SortCriteria.Title;

    //returns the models which have a corrosponding name or category
    private IEnumerable<DigitalModel> filteredModels;
    private IEnumerable<DigitalModel> FilteredModels
    {
        get
        {
            return filteredModels.Where(GetSearchCriteria);
        }
        set
        {
            filteredModels = value;
        }
    }


    //checks if the search item relates to any model which has been uploaded
    private bool GetSearchCriteria(DigitalModel model)
    {
        if (string.IsNullOrWhiteSpace(searchTerm)) return true;

        return digitalModel.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
             || digitalModel.Category.Contains(searchTerm, StringComparison.OrdinalIgnoreCase);
    }






    protected override async Task OnInitializedAsync()
    {
        digitalModel = await ModelProvider.GetAllModelsAsync();
        filteredModels = digitalModel;
        StateHasChanged(); 

    }

    private void GoToModelPage(int modelId)
    {
        NavigationManager.NavigateTo($"/ModelPage/{modelId}");
    }




    private void Sort(SortCriteria criteria)
    {
        sortCriteria = criteria;
        filteredModels = criteria switch
        {
            SortCriteria.Title => FilteredModels = filteredModels.OrderBy(c => c.Title),
            SortCriteria.Category => FilteredModels = filteredModels.OrderBy(c => c.Category), 
            _ => filteredModels
        };
    }



    private enum SortCriteria
    {
        Title,
        Category

    }

}