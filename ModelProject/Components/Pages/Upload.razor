@using ModelProject.Context
﻿@using ModelProject.Model
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@using System.ComponentModel.DataAnnotations


@page "/Upload"
@inject ModelProvider modelProvider
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject FileUploader FileUploader
@inject UserManager<User> userManager;
@inject UserProvider UserProvider;
@inject IHttpContextAccessor httpContextAccessor

@*Checks if the user is signed in*@
<AuthorizeView>
    <Authorized Context="Auth">
        <h1>Upload Page</h1>

        <EditForm Model="@Model" OnValidSubmit="@HandleSubmit">
        
           
            @*Allows the user to input a Model Name:*@
            <div class="input-group mb-3">
                <span class="input-group-text">Model Name:</span>
                <InputText type="text" class="form-control" @bind-Value="Model.Title" aria-label="Enter Here" aria-describedy="inputGroup-sizing-defullt"/>
            </div>

            @*Allows the user to input images of a 3D model*@
            <div class="row mt-1">
                <div class="col-lg-6 col-md-6 col-sm-12">
                    <div class="card h-100">
                        <div class="card-body bg-light d-flex flex-column">
                            <h4 class="card-title">Model Image (JPG/ JPEG)</h4>
                            <div class="form-group mb-2">
                                <InputFile id="imageUrl" class="form-control" @bind-Value="@Model.ImageUrl" OnChange="LoadFile" />
                                <div class="small">
                                    <ValidationMessage For="@(() => Model.ImageUrl)" />
                                </div>
                            </div>
                            <div class="mb-2">
                                <img src="/img/digitalmodels/@Model.ImageUrl" class="img-thumbnail" alt="@Model.Title" onerror="this.onerror = null; this.src='/img/no_digitalmodels.png'">
                            </div>
                        </div>
                    </div>
                </div>

                @*Allows the user to input a model file*@
                <div class="col-lg-6 col-md-6 col-sm-12">
                    <div class="card h-100">
                        <div class="card-body bg-light d-flex flex-column">
                            <h4 class="card-title">Model Files</h4>
                            <InputText class="form-control" @bind-Value="Model.ModelFiles" type="file" id="formFile" accept=".obj,.stl,.gltf,.glb" />
                        </div>
                    </div>
                </div>
            </div>


            @*Allows the user to input a description*@
            <div class="input-group mb-3">
                <span class="input-group-text" >Description:</span>
                <InputText class="form-control" @bind-Value="Model.Description" aria-label="Enter Here" aria-describedy="inputGroup-sizing-defullt" />
            </div>

            @*Allows the user to input Specifcations*@
            <div class="input-group mb-3">
                <span class="input-group-text" id="validationTooltip03">Specifications</span>
                <InputText class="form-control" @bind-Value="Model.Specifications" aria-label="Enter Here" aria-describedy="inputGroup-sizing-defullt" />
            </div>

            @*Creates a dropdown for a user to select what catagory the model falls under*@
            <label form="formFile" class="form-label">Please select the Category of your model</label>
            <div class="btn-group">
                <InputSelect id="categoryDropdown" class="form-select" @bind-Value="@Model.Category">
                    <option value="">Select a Category</option>
                    @foreach (var category in categories)
                    {
                        <option value="@category">@category</option>
                    }
                </InputSelect>
            </div>
            @*Creates a dropdown for a user to select what file format the model falls under*@
            <label form="formFile" class="form-label">Please select the file format of your model</label>
            <div class="btn-group">
                <InputSelect id="modelfilesDropdown" class="form-select" @bind-Value="@Model.FileFormat">
                    <option value="">Select the File Format</option>
                    @foreach (var fileFormat in fileFormats)
                    {
                        <option value="@fileFormat">@fileFormat</option>
                    }
                </InputSelect>
            </div>
            <div class="mt-auto">
                <button type="submit" class="btn btn-outline-primary w-100">Upload Model</button>
            </div>
        </EditForm>

        @*<div class="d-flex justify-content-center p-2">
            <ul class="list-group" style="max-width: 800px; width: 100%;">
             @if (DigitalModel != null)
                {
                    <div class="position-absolute top-0 end-0 p-2">
                        @{
                            var userName = modelProvider.GetUserByModel(DigitalModel);
                        }
                        <div>
                            <a href="/Home/User/@userName" class="user-link-owner">@userName</a>
                        </div>
                   </div>
                }
            </ul>
        </div>*@
        
    </Authorized>

    @*Allows the user to either Login or Register*@
    <NotAuthorized>
      <div class="card mb-3">
         <h5>You are need an account to upload a model</h5>
        <li class="nav-item">
          <button class="btn btn-primary" @onclick="NavigateToLogin">Login</button>
        </li>
        <li class="nav-item">
            <button class="btn btn-secondary" @onclick="NavigateToRegister">Register</button>
        </li>
      </div>
    </NotAuthorized>
</AuthorizeView>




@code
{
    [Parameter]
    public string UserId { get; set;} 
    private User? user;

    [Parameter]
    public DigitalModel? DigitalModel { get; set; }

    private UserModelUpload Model { get; set; }
    private List<DigitalModel> digitalModels;
     
    private int id {get; set;}
    

    protected override void OnParametersSet()
    {
        Model = DigitalModel is null ? new UserModelUpload() : new UserModelUpload(DigitalModel);
        base.OnParametersSet();
    }

    private List<string> categories = new List<string> { "Vehicles", "Sci-Fi", "Animal", "Horror", "Videogame", "Character", "Object" };
    private List<string> fileFormats = new() { "obj", "fbx", "stl", "gltf", "glb" };

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        var filename = await FileUploader.UploadFileAsync(e.File);
        if (filename is null)
        {
            Model.ImageUrl = null;
            return;
        }

        Model.ImageUrl = filename;
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var username = authState!.User!.Identity!.Name!;
        user = UserProvider.GetUserByUsername(username)!;

    }
    private async Task HandleSubmit()
    {
        //connects the userId with the model which is being uploaded
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var username = authState?.User?.Identity?.Name;

        if (string.IsNullOrEmpty(username))
        {
            // Handle case where the user is not authenticated
            return;
        }

        // Fetch the current user from the database
        var currentUser = UserProvider.GetUserByUsername(username);
        if (currentUser == null)
        {
            // Handle case where the user is not found
            return;
        }

        var digitalmodel = DigitalModel ?? new DigitalModel();

        // Assign current user's ID to the model
        digitalmodel.User = currentUser;
        digitalmodel.Title = Model.Title;
        digitalmodel.Description = Model.Description;
        digitalmodel.ModelFiles = Model.ModelFiles;
        digitalmodel.ImageUrl = Model.ImageUrl;
        digitalmodel.Specifications = Model.Specifications;
        digitalmodel.Category = Model.Category;
        digitalmodel.FileFormat = Model.FileFormat;

        if (digitalmodel.Id == 0)
        {
            // Add new model
            await modelProvider.AddModelAsync(digitalmodel);
            Model = new UserModelUpload(); // Reset the form
            Navigation.NavigateTo("/");
        }
        else
        {
            // Update existing model
            await modelProvider.UpdateModelAsync(digitalmodel);
            Navigation.NavigateTo("/");
        }
        //var digitalmodel = DigitalModel ?? new DigitalModel();

        //digitalmodel.User = Model.UserId;
      //  digitalmodel.Title = Model.Title;
        //digitalmodel.Description = Model.Description;
       // digitalmodel.ModelFiles = Model.ModelFiles;
      //  digitalmodel.ImageUrl = Model.ImageUrl;
       // digitalmodel.Specifications = Model.Specifications;
       // digitalmodel.Category = Model.Category;
       // digitalmodel.FileFormat = Model.FileFormat;

     //   if (digitalmodel.Id == 0)
      //  {
        //    await modelProvider.AddModelAsync(digitalmodel);
        //    Model = new UserModelUpload();
        //    Navigation.NavigateTo("/");
            // submit the model
      //  }
      //  else
       // {
          //  await modelProvider.UpdateModelAsync(digitalmodel);
         //   Navigation.NavigateTo("/");
       // }

    }

   

    //private string ReturnDesignerOfModel(Model.DigitalModel digitalmodel)
    //{
        //return modelProvider.GetUserByModel(digitalmodel);
    //}




    @*Navigation to Login and Register page from Upload Page*@
    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/Account/Login");
    }
    private void NavigateToRegister()
    {
        Navigation.NavigateTo("/Account/Register");
    }
    public sealed class UserModelUpload
    {

        //holds the accosiated information associated with the upload
        public User UserId { get; set; }

        [Required(ErrorMessage = "Model title is required.")]
        public string Title { get; set; } = "";
        [Required(ErrorMessage = "At least one model file is required.")]
        public string ModelFiles { get; set; } = "";
        [Required(ErrorMessage = "At least one image is required.")]
        public string ImageUrl { get; set; } = "";
        [Required(ErrorMessage = "Category is required.")]
        public string Category { get; set; } = "";
        [Required(ErrorMessage = "Description is required.")]
        public string Description { get; set; } = "";
        [Required(ErrorMessage = "Specifications are required.")]
        public string Specifications { get; set; } = "";
        [Required]
        public string FileFormat { get; set; } = "";

        public UserModelUpload()
        {
        }
        public UserModelUpload(DigitalModel digitalmodel)
        {
            //maps the user property from the DigitalModel object
            UserId = digitalmodel.User; 
            Title = digitalmodel.Title;
            ModelFiles = digitalmodel.ModelFiles;
            ImageUrl = digitalmodel.ImageUrl;
            Category = digitalmodel.Category;
            Description = digitalmodel.Description;
            Specifications = digitalmodel.Specifications;
            FileFormat = digitalmodel.FileFormat; 
        }

    }
}