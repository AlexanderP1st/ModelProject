@using ModelProject.Model
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@using System.ComponentModel.DataAnnotations
@using static Microsoft.EntityFrameworkCore.DbLoggerCategory

@page "/Upload"
@inject ModelProvider ModelProvider
@inject NavigationManager Navigation
@inject NavigationManager NavigationManager

@*Checks if the user is signed in*@
<AuthorizeView>
    <Authorized Context="Auth">
      <EditForm Model="@Model" OnValidSubmit="@HandleSubmit">
        <h5>Upload Page</h5>
        <form class="row g-3 needs-validation" novalidate>
            @*Allows the user to input a Model Name:*@
            <div class="col-md-4 position-relative">
                <label class="form-label">Model Name:</label>
                <InputText type="text" class="form-control" @bind-Value="Model.Title" />
               
            </div>

            @*Allows the user to input the Files of a 3D model*@
            <div class="mb-3">
                <label formFile" class="form-label">Please Input The Model Files</label>
                <InputText class="form-control" @bind-Value="Model.ModelFiles" type="file" id="formFile" accept=".obj,.fbx,.stl,.gltf,.glb" />
                
            </div>

            @*Allows the user to input images of a 3D model*@
            <div class="mb-3">
                <label for="=" formFile" class="form-label">Please Input Images of the 3D Model</label>
                <InputText class="form-control" @bind-Value="Model.Images" type="file" id="formFile" accept=".jpf,.jpeg,.png" multiple />
                
            </div>

            @*Allows the user to input a description*@
            <div class="input-group mb-3">
                <span class="input-group-text" >Description:</span>
                    <InputText class="form-control" @bind-Value="Model.Description" />
                    
            </div>

            @*Allows the user to input Specifcations*@
            <div class="input-group mb-3">
                <span class="input-group-text" >Specifications</span>
                <InputText class="form-control" @bind-Value="Model.Specifications" />
                
            </div>

            @*Creates a dropdown for a user to select what catagory the model falls under*@
            <label form="formFile" class="form-label">Please select the Category of your model</label>
            <div class="btn-group">
                <InputSelect id="categoryDropdown" class="form-select" @bind-Value="Model.Category">
                    <option value="">Select a Category</option>
                    @foreach (var category in categories)
                    {
                        <option value="@category">@category</option>
                    }
                </InputSelect>
                
            </div>

            @*Creates a dropdown for a user to select what file format the model falls under*@
            <label form="formFile" class="form-label">Please select the file format of your model</label>
            <div class="btn-group">
                    <InputSelect id="modelfilesDropdown" class="form-select" @bind-Value="Model.FileFormat">
                        <option value="">Select the File Format</option>
                        @foreach (var ff in fileFormats)
                        {
                            <option value="@ff">@ff</option>
                        }
                    </InputSelect>
                    
            </div>

            <a @onclick="UploadModel" class="btn btn-outline-warning m-2">Upload Model</a>
        </form>
      </EditForm>
    </Authorized>

    @*Allows the user to either Login or Register*@
   <NotAuthorized>
       <div class="card mb-3">
            <h5>You are need an account to upload a model</h5>
          <li class="nav-item">
             <button class="btn btn-primary" @onclick="NavigateToLogin">Login</button>
           
          </li>

          <li class="nav-item">
            <button class="btn btn-secondary" @onclick="NavigateToRegister">Register</button>
          </li>
       </div>
   </NotAuthorized>
</AuthorizeView>




@code 
{
    [Parameter]
    public DigitalModel? DigitalModel { get; set; }

    private DigitalModel Model = new DigitalModel();


    private string description;
    private string specifications;
    private string selectedCategory;
    private string selectedFormat;
    private string[] images = [];
    private string[] modelFiles = [];
    private string fileformat;
    private string category;

    private List<string> modelFilePaths = new();
    private List<string> imageFilePaths = new();
    private List<string> categories = new List<string> { "Vehicles", "Sci-Fi", "Animal", "Horror", "Videogame", "Character" };
    private List<string> fileFormats = new() { "obj", "fbx", "stl", "gltf", "glb" };

    private async Task HandleSubmit()
    {
        var digitalModel = DigitalModel ?? new DigitalModel();

        digitalModel.Id = Model.Id;
        digitalModel.Title =  Model.Title;
        digitalModel.Description = Model.Description;
        digitalModel.ModelFiles = Model.ModelFiles;
        digitalModel.Images = Model.Images;
        digitalModel.Specifications = Model.Specifications;
        digitalModel.FileFormat = Model.FileFormat;

        if (digitalModel.Id == 0 )
        {
            await ModelProvider.AddModelAsync(digitalModel);
            Model = new DigitalModel();
        }
        else
        {
            await ModelProvider.UpdateModelAsync(digitalModel);
        }

        NavigationManager.NavigateTo("/");


        // submit the model
    }




    private void SelectCategory(string category)
    {
        selectedCategory = category;
    }

    private void SelectFormat(string format)
    {
        selectedFormat = format;
    }

    //saves model files  
    private async Task OnModelFilesSelected(ChangeEventArgs e)
    {
        var files = e.Value as IEnumerable<IBrowserFile>;
        modelFiles = files.Select(f => f.Name).ToArray();
    }

    //saves image files
    private async Task OnImageSelected(ChangeEventArgs e)
    {
        var files = e.Value as IEnumerable<IBrowserFile>;
        images = files.Select(f => f.Name).ToArray();
    }



    private void UploadModel()
    {
        Model.ModelFiles = fileformat;
        Model.Category = category;
        // adds the model and redirects the user to the home page
        ModelProvider.AddModelAsync(DigitalModel);
        NavigationManager.NavigateTo("/");

    }

    

    @*Navigation to Login and Register page from Upload Page*@
    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/Account/Login");
    }

    private void NavigateToRegister()
    {
        Navigation.NavigateTo("/Account/Register");
    }

    public sealed class UserModelUpload
    {

        [Required(ErrorMessage = "Model title is required.")]
        public string Title { get; set; } = "";


        [Required(ErrorMessage = "At least one model file is required.")]
        public string ModelFiles { get; set; } = "";


        [Required(ErrorMessage = "At least one image is required.")]
        public string Images { get; set; } = "";

        [Required(ErrorMessage = "Category is required.")]
        public string Category { get; set; } = "";

        [Required(ErrorMessage = "Description is required.")]
        public string Description { get; set; } = "";

        [Required(ErrorMessage = "Specifications are required.")]
        public string Specifications { get; set; } = "";

        [Required(ErrorMessage = "FileFormat is required.")]
        public string FileFormat { get; set; } = "";

        public UserModelUpload()
        {

        }

        public UserModelUpload(DigitalModel digitalModel)
        {
            Title = digitalModel.Title;
            ModelFiles = digitalModel.ModelFiles;
            Images = digitalModel.Images;
            Category = digitalModel.Category;
            Description = digitalModel.Description;
            Specifications = digitalModel.Specifications;
            FileFormat = digitalModel.FileFormat;
        }
    }

}

