@using ModelProject.Context
﻿@using ModelProject.Model
@using Microsoft.AspNetCore.Http @*Retrieving user Id*@
@using Microsoft.AspNetCore.Identity @*Retrieving user Id*@
@using Microsoft.AspNetCore.Components.Authorization
@using System.ComponentModel.DataAnnotations
@using System.IO;
@using Microsoft.AspNetCore.Components.Forms; 


@page "/Upload"
@inject ModelProvider ModelProvider
@inject NavigationManager Navigation
@inject NavigationManager NavigationManager
@inject FileUploader FileUploader
@inject UserManager<User> userManager;
@inject ModelFileProvider ModelFileProvider
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserProvider UserProvider


@*Checks if the user is signed in*@
<AuthorizeView>
    <Authorized Context="Auth">
     
        <EditForm Model="@Model" OnValidSubmit="@HandleSubmit">
            <h5>Upload Page</h5>




                @*Allows the user to input a Model Name:*@
                <div class="col-md-4 position-relative">
                    <label for="validationTooltip01" class="form-label">Model Name:</label>
                    <InputText type="text" class="form-control" @bind-Value="Model.Title" id="validationTooltip01" required />
                    <div class="valid-tooltip">
                        Perfect
                    </div>
                </div>


               @*Allows the user to input images of a 3D model*@
               <div class="col-lg-6 col-12 mt-1">
                  <div class="card h-100">
                    <div class="card-body bg-light d-flex flex-column">
                        <h4 class="card-title">Model image (JPG/ JPEG)</h4>
                        <div class="form-group mb-2">
                            <InputFile id="imageUrl" class="form-control" @bind-Value="@Model.ImageUrl" OnChange="LoadFile" />
                            <div class="small">
                                <ValidationMessage For="@(() => Model.ImageUrl)" />
                            </div>
                        </div>
                        <div class="mb-2">
                            <img src="/img/digitalmodels/@Model.ImageUrl" class="img-thumbnail" alt="@Model.Title" onerror="this.onerror = null; this.src='/img/no_digitalmodels.png'">
                        </div>
                    </div>
                   </div>
               </div>

                @*Allows the user to input the Files of a 3D model*@
            <div class="mb-4">
                <label for="modelFileUpload" class="form-label">Upload 3D Model File (.stl only)</label>
                <InputFile id="modelFileUpload" OnChange="HandleFileSelected" accept=".stl" />
                @if (!string.IsNullOrEmpty(uploadedModelFileName))
                {
                    <p class="text-success mt-2">File Uploaded: @uploadedModelFileName</p>
                }
                else if (fileUploadError != null)
                {
                    <p class="text-danger mt-2">@fileUploadError</p>
                }
                else
                {
                    <p class="text-muted mt-2">No file uploaded yet.</p>
                }
            </div>

                
              



                @*Allows the user to input a description*@
                <div class="input-group mb-3">
                    <span class="input-group-text" id="validationTooltip02">Description:</span>
                    <InputText class="form-control" @bind-Value="Model.Description" id="validationTooltip02" aria-label="Enter Here" aria-describedy="inputGroup-sizing-defullt" />
                    <div class="valid-tooltip">
                        Perfect
                    </div>
                </div>

                @*Allows the user to input Specifcations*@
                <div class="input-group mb-3">
                    <span class="input-group-text" id="validationTooltip03">Specifications</span>
                    <InputText class="form-control" @bind-Value="Model.Specifications" id="validationTooltip03" aria-label="Enter Here" aria-describedy="inputGroup-sizing-defullt" />
                    <div class="valid-tooltip">
                        Perfect
                    </div>
                </div>

                @*Allows the user to enter the file size*@
                <div class="input-group mb-3">
                      <span class="input-group-text" id="validationTooltip03">File size</span>
                      <InputText class="form-control" @bind-Value="Model.FileSize" id="validationTooltip03" aria-label="Enter Here" aria-describedy="inputGroup-sizing-defullt" />
                      <div class="valid-tooltip">
                         Perfect
                      </div>
                </div>

                @*Creates a dropdown for a user to select what catagory the model falls under*@
                <label form="formFile" class="form-label">Please select the Category of your model</label>
                <div class="btn-group">
                    <InputSelect id="categoryDropdown" class="form-select" @bind-Value="@category">
                        <option value="">Select a Category</option>
                        @foreach (var category in categories)
                        {
                            <option value="@category">@category</option>
                        }
                    </InputSelect>
                </div>

                @*Creates a dropdown for a user to select what file format the model falls under*@
                <label form="formFile" class="form-label">Please select the file format of your model</label>
                <div class="btn-group">
                    <InputSelect id="modelfilesDropdown" class="form-select" @bind-Value="@fileformat">
                        <option value="">Select the File Format</option>
                        @foreach (var ff in fileFormats)
                        {
                            <option value="@ff">@ff</option>
                        }
                    </InputSelect>
                </div>

                <a @onclick="UploadModel" class="btn btn-outline-warning m-2">Upload Model</a>
        </EditForm>
    </Authorized>

    @*Allows the user to either Login or Register*@
    <NotAuthorized>
      <div class="card mb-3">
            <h5>You are need an account to upload a model</h5>
        <li class="nav-item">
            <button class="btn btn-primary" @onclick="NavigateToLogin">Login</button>

        </li>

        <li class="nav-item">
            <button class="btn btn-secondary" @onclick="NavigateToRegister">Register</button>
        </li>
     </div>
    </NotAuthorized>
</AuthorizeView>




@code
{
    private User User { get; set; } = new();
    [Parameter]
    public DigitalModel? DigitalModel { get; set; }

    private DigitalModel Model = new DigitalModel();

    private string username; 
    private string description;
    private string specifications;
    private string selectedCategory;
    private string selectedFormat;
    private string[] imageUrl = [];
    private string[] modelFiles = [];
    private string fileformat;
    private string category;
    private List<string> modelFilePaths = new();
    private List<string> imageFilePaths = new();
    private List<string> categories = new List<string> { "Vehicles", "Sci-Fi", "Animal", "Horror", "Videogame", "Character", "Object"};
    private List<string> fileFormats = new() { "obj", "fbx", "stl", "gltf", "glb" };
    private IBrowserFile selectedFile;
    private string uploadedModelFileName = string.Empty; 
    private string? fileUploadError = null; 
    private const long MaxFileSize = 50 * 1024 * 1024;



    //handles the file selection 
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        fileUploadError = null;
        var file = e.File; 

        if (file != null)
        {
            var fileExtension = Path.GetExtension(file.Name).ToLower();
            if (fileExtension != ".stl")
            {
                //checks if the file is stl
                fileUploadError = "Only .stl files are allowed.";
                uploadedModelFileName = string.Empty;
                return; 
            }

            try
            {
                //saves the location 
                var uploadFolder = Path.Combine("wwwroot", "uploads", "models");
                if (!Directory.Exists(uploadFolder))
                {
                    Directory.CreateDirectory(uploadFolder);
                }

                var filePath = Path.Combine(uploadFolder, file.Name);

                using (var stream = new FileStream(filePath, FileMode.Create))
                {
                    await file.OpenReadStream().CopyToAsync(stream); 
                }

                uploadedModelFileName = file.Name;

                Model.ModelFiles = $"/uploads/models/{file.Name}";
            }
            catch (Exception ex)
            {
                fileUploadError = $"Error uploading file: {ex.Message}";
            }
        }
        else
        {
            //returns message if no files are sleceted
            fileUploadError = "No file selected.";
        }

    }



    private async Task HandleSubmit()
    {
        if (selectedFile != null)
        {
            var filePath = await ModelFileProvider.SaveModelFileAsync(selectedFile);
            Model.ModelFiles = filePath;
        }

        var digitalmodel = DigitalModel ?? new DigitalModel();

        digitalmodel.User = Model.User;
        digitalmodel.Title = Model.Title;
        digitalmodel.Description = Model.Description;
        digitalmodel.ModelFiles = Model.ModelFiles;
        digitalmodel.ImageUrl = Model.ImageUrl;
        digitalmodel.Specifications = Model.Specifications;
        digitalmodel.FileSize = Model.FileSize;

        if (digitalmodel.Id == 0)
        {
            await ModelProvider.AddModelAsync(digitalmodel);
            Model = new DigitalModel();
        }
        else
        {
            await ModelProvider.UpdateModelAsync(digitalmodel);
        }

        NavigationManager.NavigateTo("/");


        // submit the model
    }


    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        var filename = await FileUploader.UploadFileAsync(e.File);
        if (filename is null)
        {
            Model.ImageUrl = null;
            return;
        }

        Model.ImageUrl = filename;
    }

    private void SelectCategory(string category)
    {
        selectedCategory = category;
    }

    private void SelectFormat(string format)
    {
        selectedFormat = format;
    }

    //saves model files
    private async Task OnModelFilesSelected(ChangeEventArgs e)
    {
        var files = e.Value as IEnumerable<IBrowserFile>;
        modelFiles = files.Select(f => f.Name).ToArray();
    }

    //saves image files
    private async Task OnImageSelected(ChangeEventArgs e)
    {
        var files = e.Value as IEnumerable<IBrowserFile>;
        imageUrl = files.Select(f => f.Name).ToArray();
    }



    private void UploadModel()
    {
        Model.ModelFiles = fileformat;
        Model.Category = category;
        // adds the model and redirects the user to the home page
        ModelProvider.AddModelAsync(Model);
        NavigationManager.NavigateTo("/");

    }

    protected async override Task OnInitializedAsync()
    {
        var user = UserProvider.GetUserByUsername(username);
    }

    @*Navigation to Login and Register page from Upload Page*@
    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/Account/Login");
    }

    private void NavigateToRegister()
    {
        Navigation.NavigateTo("/Account/Register");
    }

    public sealed class UserModelUpload
    {
        public string User { get; set; } = "";

        [Required(ErrorMessage = "Model title is required.")]
        public string Title { get; set; } = "";


        [Required(ErrorMessage = "At least one model file is required.")]
        public string ModelFiles { get; set; } = "";


        [Required(ErrorMessage = "At least one image is required.")]
        public string ImageUrl { get; set; } = "";

        [Required(ErrorMessage = "Category is required.")]
        public string Category { get; set; } = "";

        [Required(ErrorMessage = "Description is required.")]
        public string Description { get; set; } = "";

        [Required(ErrorMessage = "Specifications are required.")]
        public string Specifications { get; set; } = "";

        [Required(ErrorMessage = "File size are required.")]
        public string FileSize { get; set; } = "";

        public UserModelUpload()
        {

        }

        public UserModelUpload(DigitalModel digitalModel)
        {

            Title = digitalModel.Title;
            ModelFiles = digitalModel.ModelFiles;
            ImageUrl = digitalModel.ImageUrl;
            Category = digitalModel.Category;
            Description = digitalModel.Description;
            Specifications = digitalModel.Specifications;
            FileSize = digitalModel.FileSize;
        }
    }

    

}