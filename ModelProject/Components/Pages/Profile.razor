@page "/Profile"
@using ModelProject.Context
@using ModelProject.Model
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserProvider UserProvider
@inject ModelProvider ModelProvider
@inject NavigationManager NavigationManager

@*Ensures the user is logged in and if not the user can choose to either create an account or log in *@
@if (user == null)
{
    <div class="card mb-3">
        <h5>You are need an account to view your profile</h5>
        <li class="nav-item">
            <button class="btn btn-primary" @onclick="NavigateToLogin">Login</button>
        </li>
        <li class="nav-item">
            <button class="btn btn-secondary" @onclick="NavigateToRegister">Register</button>
        </li>
    </div>
}
else
{
  
    <div class="container mt-4" custom>
        <div class="card darker-border-0">
            <div class="card-body custom-primary-background-color">
               <div class="row align-items-centre">
                   <div class="col-auto">
                       @*Displays a defult profile picture image*@
                        <img src="/img/ProfilePic.png" class="rounded mx-auto d-block" height="75" style="max-height:100%; max-width:100%;" />
                   </div>
                   
                   <div class="col-auto">
                      @*Displays the Username of the person who created the model*@   
                     
                      <h3>@user.UserName</h3>
                   </div>

                   <div class="col-auto">
                       @*Displayes the total amount of models uploaded by the user*@
                        <h7>Total models uploaded: @userModels?.Count</h7>
                        
                   </div>
               </div>
            </div>
        </div>
    </div>
  
    
    <div class="container mt-4" custom>
    <div class="card darker-border-0">
        
        @if(userModels == null || !userModels.Any())
        {
            <p>No Designs Uploaded Yet.</p>
        }
        else
        {
          
            <div class="row">
                @foreach (var model in userModels)
                {
                    <div class="col-md-4 mb-4">
                        <div class="card h-100">
                            @*fetches the image of the model*@
                            <img src="/img/digitalmodels/@model.ImageUrl" class="card-img-top" alt="@model.Title" style="height: 200px; object-fit: cover;">
                            <div class="card-body">
                                @*Fetches the title of the model*@
                                <h5 class="card-title">@model.Title</h5>


                            </div>
                            <div class="card-footer">
                                @*Gets the model category and file format of the model*@
                                <small class="text-muted">Category: @model.Category</small><br />
                                <small class="text-muted">File Format: @model.FileFormat</small>
                                <button @onclick="@(() => GoToModelPage(model.Id))" class="btn btn-outline-primary" width="20">View Details</button>
                                @*This button is used to delete a specific model from a database *@
                                <button class="btn btn-danger" @onclick="() => DeleteModel(model.Id)">Delete</button>

                            </div>

                        </div>
                    </div>
                }
            </div>
         
        }
    </div>
    </div>
}

@code 
{
    private User? user;
    private List<DigitalModel>? userModels;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var username = authState?.User?.Identity?.Name;

        if (string.IsNullOrEmpty(username))
        {
            // If the user is not authenticated, redirect or show error
            return;
        }

        // Fetches the user
        user = UserProvider.GetUserByUsername(username);
        if (user != null)
        {
            // Fetches models uploaded by the designer
            userModels = await ModelProvider.GetModelByUserAsync(user);
        }

        
    }

    private async Task DeleteModel(int modelId)
    {
        //retreives the model with the specified Id from the models collection
        var modelToDelete = userModels?.FirstOrDefault(m => m.Id == modelId);
        if (modelToDelete != null)
        {

            userModels?.Remove(modelToDelete);
            //through the model provider it deletes the model from the database
            await ModelProvider.DeleteModelAsync(modelId);
        }
    }
    
    private void GoToModelPage(int modelId)
    {
        //redurects the user to the model page
        NavigationManager.NavigateTo($"/ModelPage/{modelId}");
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/Account/Login");
    }
    private void NavigateToRegister()
    {
        NavigationManager.NavigateTo("/Account/Register");
    }
}