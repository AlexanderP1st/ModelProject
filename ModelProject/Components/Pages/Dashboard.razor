@page "/dashboard"
@using ModelProject.Model
@inject ModelProvider ModelProvider
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

@inject ModelProvider ModelProvider
@inject NavigationManager NavigationManager

<PageTitle>Dashboard</PageTitle>

<AuthorizeView>
    <Authorized Context="Auth">
        <h1>Dashboard</h1>
        <div class="container mt-4">
        <div class="row mt-4">
           <!-- Summary Cards -->
        <div class="col-md-4">
            <div class="card text-white bg-primary mb-3">
                <div class="card-body">
                    <h5 class="card-title">Total Models</h5>
                    <p class="card-text display-4">@totalModels</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card text-white bg-success mb-3">
                <div class="card-body">
                    <h5 class="card-title">Total Downloads</h5>
                    <p class="card-text display-4">@totalDownloads</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card text-white bg-info mb-3">
                <div class="card-body">
                    <h5 class="card-title">Most Watched Model</h5>
                    
                </div>
            </div>
        </div>
    </div>

    <!-- Models Table -->
    <div class="row mt-4">
        <h3>All Models</h3>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Title</th>
                    <th>Category</th>
                    <th>Downloads</th>
                    <th>Watchlist</th>
                </tr>
            </thead>
            <tbody>
                @if (models == null || !models.Any())
                {
                    <tr>
                        <td colspan="5" class="text-center">No models available.</td>
                    </tr>
                }
                else
                {
                    @foreach (var model in models)
                    {
                        <tr>
                            <td>@model.Id</td>
                            <td>@model.Title</td>
                            <td>@model.Category</td>
                            <td>@model.Downloads</td>
                            <td>@model.WatchListCount</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>
    </Authorized>
    <NotAuthorized>
        <div class="card mb-3">
            <h5>You are need an account to access your dashboard</h5>
        <li class="nav-item">
            <button class="btn btn-primary" @onclick="NavigateToLogin">Login</button>
        </li>
        <li class="nav-item">
            <button class="btn btn-secondary" @onclick="NavigateToRegister">Register</button>
        </li>
        </div>
    </NotAuthorized>
</AuthorizeView>




    
@code {
    
    private int totalModels;
    private int totalDownloads;
    private DigitalModel? mostWatchedModel;
    private IEnumerable<DigitalModel> models;

    protected override async Task OnInitializedAsync()
    {
        // Fetch all models
        models = await ModelProvider.GetAllModelsAsync();

        // Calculate total models
        totalModels = models.Count();

        // Calculate total downloads
        totalDownloads = models.Sum(model => model.Downloads);

        
    }

 

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/Account/Login");
    }
    private void NavigateToRegister()
    {
        NavigationManager.NavigateTo("/Account/Register");
    }
}